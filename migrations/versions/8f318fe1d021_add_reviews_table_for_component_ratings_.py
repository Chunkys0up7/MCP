"""add reviews table for component ratings and reviews

Revision ID: 8f318fe1d021
Revises: c5c726943b4d
Create Date: 2025-05-25 14:53:26.693236

This migration script:
1. Defines database schema changes
2. Handles both upgrade and downgrade operations
3. Includes proper documentation
4. Follows best practices for database migrations

The script is generated by Alembic and should be modified to include:
- Detailed descriptions of changes
- Proper SQL syntax
- Error handling
- Data migration steps if needed
"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import sqlite

# revision identifiers, used by Alembic.
revision = '8f318fe1d021'
down_revision = 'c5c726943b4d'
branch_labels = None
depends_on = None


def upgrade() -> None:
    """
    Upgrade database schema.
    
    This function:
    1. Applies schema changes
    2. Handles data migrations
    3. Updates indexes and constraints
    4. Manages dependencies
    
    The changes should be:
    - Atomic (all or nothing)
    - Reversible (can be downgraded)
    - Well-documented
    - Tested
    """
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('mcp_tags',
    sa.Column('mcp_id', sa.UUID(), nullable=True),
    sa.Column('tag', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['mcp_id'], ['mcps.id'], )
    )
    op.create_table('reviews',
    sa.Column('component_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('rating', sa.Integer(), nullable=False),
    sa.Column('review_text', sa.String(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('rating >= 1 AND rating <= 5', name='valid_rating_range'),
    sa.ForeignKeyConstraint(['component_id'], ['mcps.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.add_column('workflow_runs', sa.Column('id', sa.UUID(), nullable=False))
    op.create_unique_constraint('uq_workflow_runs_id', 'workflow_runs', ['id'])
    op.create_table('workflow_step_runs',
    sa.Column('workflow_run_id', sa.UUID(), nullable=False),
    sa.Column('step_id', sa.String(), nullable=False),
    sa.Column('mcp_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.Enum('pending', 'running', 'completed', 'failed', name='step_status'), nullable=False),
    sa.Column('inputs', sa.JSON(), nullable=False),
    sa.Column('outputs', sa.JSON(), nullable=True),
    sa.Column('error', sa.String(), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('finished_at', sa.DateTime(), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['mcp_id'], ['mcps.id'], ),
    sa.ForeignKeyConstraint(['workflow_run_id'], ['workflow_runs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.add_column('audit_logs', sa.Column('updated_at', sa.DateTime(), nullable=False))
    # op.alter_column('audit_logs', 'user_id',
    #            existing_type=sa.VARCHAR(length=255),
    #            type_=sa.UUID(),
    #            existing_nullable=False)
    # op.alter_column('audit_logs', 'target_id',
    #            existing_type=sa.INTEGER(),
    #            type_=sa.UUID(),
    #            nullable=False)
    # op.alter_column('audit_logs', 'id',
    #            existing_type=sa.INTEGER(),
    #            type_=sa.UUID(),
    #            existing_nullable=False)
    # op.alter_column('audit_logs', 'created_at',
    #            existing_type=sa.DATETIME(),
    #            server_default=None,
    #            existing_nullable=False)
    op.add_column('chain_sessions', sa.Column('updated_at', sa.DateTime(), nullable=False))
    # op.alter_column('chain_sessions', 'id',
    #            existing_type=sa.INTEGER(),
    #            type_=sa.UUID(),
    #            existing_nullable=False)
    # op.alter_column('chain_sessions', 'created_at',
    #            existing_type=sa.DATETIME(),
    #            server_default=None,
    #            existing_nullable=False)
    op.drop_column('chain_sessions', 'last_activity')
    op.add_column('mcp_chains', sa.Column('updated_at', sa.DateTime(), nullable=False))
    # op.alter_column('mcp_chains', 'parent_chain',
    #            existing_type=sa.INTEGER(),
    #            type_=sa.UUID(),
    #            existing_nullable=True)
    # op.alter_column('mcp_chains', 'id',
    #            existing_type=sa.INTEGER(),
    #            type_=sa.UUID(),
    #            existing_nullable=False)
    # op.alter_column('mcp_chains', 'created_at',
    #            existing_type=sa.DATETIME(),
    #            server_default=None,
    #            existing_nullable=False)
    # op.create_unique_constraint(None, 'mcp_chains', ['name'])
    op.add_column('mcp_configurations', sa.Column('updated_at', sa.DateTime(), nullable=False))
    # op.alter_column('mcp_configurations', 'id',
    #            existing_type=sa.INTEGER(),
    #            type_=sa.UUID(),
    #            existing_nullable=False)
    # op.alter_column('mcp_configurations', 'created_at',
    #            existing_type=sa.DATETIME(),
    #            server_default=None,
    #            existing_nullable=False)
    # op.create_unique_constraint(None, 'mcp_configurations', ['name'])
    op.drop_column('mcp_configurations', 'last_modified')
    op.add_column('mcp_permissions', sa.Column('id', sa.UUID(), nullable=False))
    op.add_column('mcp_permissions', sa.Column('created_at', sa.DateTime(), nullable=False))
    op.add_column('mcp_permissions', sa.Column('updated_at', sa.DateTime(), nullable=False))
    # op.alter_column('mcp_permissions', 'user_id',
    #            existing_type=sa.VARCHAR(length=255),
    #            type_=sa.UUID(),
    #            existing_nullable=False)
    # op.alter_column('mcp_permissions', 'chain_id',
    #            existing_type=sa.INTEGER(),
    #            type_=sa.UUID(),
    #            existing_nullable=False)
    # op.alter_column('mcp_permissions', 'access_level',
    #            existing_type=sa.VARCHAR(length=20),
    #            type_=sa.Integer(),
    #            existing_nullable=False)
    op.add_column('mcp_versions', sa.Column('definition', sa.JSON(), nullable=False))
    mcpstatus_enum = sa.Enum('ACTIVE', 'INACTIVE', 'PENDING', 'FAILED', 'COMPLETED', 'DRAFT', name='mcpstatus')
    mcpstatus_enum.create(op.get_bind(), checkfirst=True)
    op.add_column('mcp_versions', sa.Column('status', mcpstatus_enum, nullable=True))
    op.add_column('mcp_versions', sa.Column('updated_at', sa.DateTime(), nullable=True))
    # op.alter_column('mcp_versions', 'id',
    #            existing_type=sa.NUMERIC(),
    #            type_=sa.UUID(),
    #            existing_nullable=False)
    # op.alter_column('mcp_versions', 'mcp_id',
    #            existing_type=sa.NUMERIC(),
    #            type_=sa.UUID(),
    #            existing_nullable=False)
    # op.alter_column('mcp_versions', 'created_at',
    #            existing_type=sa.DATETIME(),
    #            server_default=None,
    #            nullable=True)
    # op.drop_index(op.f('idx_mcp_version'), table_name='mcp_versions')
    # op.drop_constraint(None, 'mcp_versions', type_='foreignkey')
    # op.create_foreign_key(None, 'mcp_versions', 'mcps', ['mcp_id'], ['id'])
    op.drop_column('mcp_versions', 'description')
    op.drop_column('mcp_versions', 'config')
    op.add_column('mcps', sa.Column('current_version_id', sa.UUID(), nullable=True))
    # op.alter_column('mcps', 'id',
    #            existing_type=sa.NUMERIC(),
    #            type_=sa.UUID(),
    #            existing_nullable=False)
    # op.alter_column('mcps', 'description',
    #            existing_type=sa.TEXT(),
    #            type_=sa.String(),
    #            existing_nullable=True)
    # op.alter_column('mcps', 'type',
    #            existing_type=sa.VARCHAR(length=50),
    #            type_=sa.Enum('LLM_PROMPT', 'JUPYTER_NOTEBOOK', 'PYTHON_SCRIPT', 'AI_ASSISTANT', name='mcptype'),
    #            existing_nullable=False)
    # op.alter_column('mcps', 'created_at',
    #            existing_type=sa.DATETIME(),
    #            server_default=None,
    #            nullable=True)
    # op.alter_column('mcps', 'updated_at',
    #            existing_type=sa.DATETIME(),
    #            server_default=None,
    #            nullable=True)
    # op.drop_index(op.f('idx_mcp_type'), table_name='mcps')
    # op.create_foreign_key(None, 'mcps', 'mcp_versions', ['current_version_id'], ['id'])
    op.drop_column('mcps', 'tags')
    op.drop_column('mcps', 'initial_config')
    op.drop_column('mcps', 'embedding')
    op.add_column('workflow_definitions', sa.Column('input_schema', sa.JSON(), nullable=False))
    op.add_column('workflow_definitions', sa.Column('output_schema', sa.JSON(), nullable=False))
    error_strategy_enum = sa.Enum('stop', 'continue', 'retry', name='error_strategy')
    error_strategy_enum.create(op.get_bind(), checkfirst=True)
    op.add_column('workflow_definitions', sa.Column('error_strategy', error_strategy_enum, nullable=False))
    execution_mode_enum = sa.Enum('sequential', 'parallel', name='execution_mode')
    execution_mode_enum.create(op.get_bind(), checkfirst=True)
    op.add_column('workflow_definitions', sa.Column('execution_mode', execution_mode_enum, nullable=False))
    op.add_column('workflow_definitions', sa.Column('id', sa.UUID(), nullable=False))
    # op.alter_column('workflow_definitions', 'description',
    #            existing_type=sa.TEXT(),
    #            type_=sa.String(),
    #            existing_nullable=True)
    # op.alter_column('workflow_definitions', 'created_at',
    #            existing_type=sa.DATETIME(),
    #            server_default=None,
    #            existing_nullable=False)
    # op.alter_column('workflow_definitions', 'updated_at',
    #            existing_type=sa.DATETIME(),
    #            server_default=None,
    #            existing_nullable=False)
    # op.drop_index(op.f('ix_workflow_definitions_name'), table_name='workflow_definitions')
    op.create_unique_constraint(None, 'workflow_definitions', ['name'])
    op.drop_constraint('workflow_runs_workflow_id_fkey', 'workflow_runs', type_='foreignkey')
    op.drop_column('workflow_definitions', 'workflow_id')
    op.create_primary_key('pk_workflow_definitions', 'workflow_definitions', ['id'])
    op.create_foreign_key(
        'workflow_runs_workflow_id_fkey',
        'workflow_runs',
        'workflow_definitions',
        ['workflow_id'],
        ['id']
    )
    op.add_column('workflow_runs', sa.Column('error', sa.String(), nullable=True))
    op.add_column('workflow_runs', sa.Column('created_at', sa.DateTime(), nullable=False))
    op.add_column('workflow_runs', sa.Column('updated_at', sa.DateTime(), nullable=False))
    # op.alter_column('workflow_runs', 'workflow_id',
    #            existing_type=sa.NUMERIC(),
    #            type_=sa.UUID(),
    #            existing_nullable=False)
    # op.alter_column('workflow_runs', 'status',
    #            existing_type=sa.VARCHAR(length=50),
    #            type_=sa.Enum('pending', 'running', 'completed', 'failed', name='workflow_status'),
    #            existing_nullable=False)
    # op.alter_column('workflow_runs', 'inputs',
    #            existing_type=sqlite.JSON(),
    #            nullable=False)
    # op.alter_column('workflow_runs', 'started_at',
    #            existing_type=sa.DATETIME(),
    #            server_default=None,
    #            nullable=True)
    # op.drop_index(op.f('ix_workflow_runs_status'), table_name='workflow_runs')
    # op.drop_index(op.f('ix_workflow_runs_workflow_id'), table_name='workflow_runs')
    # op.drop_constraint(None, 'workflow_runs', type_='foreignkey')
    # op.create_foreign_key(None, 'workflow_runs', 'workflow_definitions', ['workflow_id'], ['id'])
    op.drop_column('workflow_runs', 'run_id')
    op.drop_column('workflow_runs', 'step_results')
    op.drop_column('workflow_runs', 'error_message')
    # ### end Alembic commands ###


def downgrade() -> None:
    """
    Downgrade database schema.
    
    This function:
    1. Reverts schema changes
    2. Restores previous state
    3. Handles data rollback
    4. Manages dependencies
    
    The changes should:
    - Be the exact reverse of upgrade
    - Handle data loss gracefully
    - Be well-documented
    - Be tested
    """
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('workflow_runs', sa.Column('error_message', sa.TEXT(), nullable=True))
    op.add_column('workflow_runs', sa.Column('step_results', sqlite.JSON(), nullable=True))
    op.add_column('workflow_runs', sa.Column('run_id', sa.NUMERIC(), nullable=False))
    op.drop_constraint(None, 'workflow_runs', type_='foreignkey')
    op.create_foreign_key(None, 'workflow_runs', 'workflow_definitions', ['workflow_id'], ['workflow_id'])
    op.create_index(op.f('ix_workflow_runs_workflow_id'), 'workflow_runs', ['workflow_id'], unique=False)
    op.create_index(op.f('ix_workflow_runs_status'), 'workflow_runs', ['status'], unique=False)
    op.alter_column('workflow_runs', 'started_at',
               existing_type=sa.DATETIME(),
               server_default=sa.text('(now())'),
               nullable=False)
    op.alter_column('workflow_runs', 'inputs',
               existing_type=sqlite.JSON(),
               nullable=True)
    op.alter_column('workflow_runs', 'status',
               existing_type=sa.Enum('pending', 'running', 'completed', 'failed', name='workflow_status'),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)
    op.alter_column('workflow_runs', 'workflow_id',
               existing_type=sa.UUID(),
               type_=sa.NUMERIC(),
               existing_nullable=False)
    op.drop_column('workflow_runs', 'updated_at')
    op.drop_column('workflow_runs', 'created_at')
    op.drop_column('workflow_runs', 'id')
    op.drop_column('workflow_runs', 'error')
    op.add_column('workflow_definitions', sa.Column('workflow_id', sa.NUMERIC(), nullable=False))
    op.drop_constraint(None, 'workflow_definitions', type_='unique')
    op.create_index(op.f('ix_workflow_definitions_name'), 'workflow_definitions', ['name'], unique=False)
    op.alter_column('workflow_definitions', 'updated_at',
               existing_type=sa.DATETIME(),
               server_default=sa.text('(now())'),
               existing_nullable=False)
    op.alter_column('workflow_definitions', 'created_at',
               existing_type=sa.DATETIME(),
               server_default=sa.text('(now())'),
               existing_nullable=False)
    op.alter_column('workflow_definitions', 'description',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.drop_column('workflow_definitions', 'id')
    op.drop_column('workflow_definitions', 'execution_mode')
    op.drop_column('workflow_definitions', 'error_strategy')
    op.drop_column('workflow_definitions', 'output_schema')
    op.drop_column('workflow_definitions', 'input_schema')
    op.add_column('mcps', sa.Column('embedding', sa.TEXT(), nullable=True))
    op.add_column('mcps', sa.Column('initial_config', sqlite.JSON(), nullable=False))
    op.add_column('mcps', sa.Column('tags', sa.TEXT(), nullable=True))
    op.drop_constraint(None, 'mcps', type_='foreignkey')
    op.create_index(op.f('idx_mcp_type'), 'mcps', ['type'], unique=False)
    op.alter_column('mcps', 'updated_at',
               existing_type=sa.DATETIME(),
               server_default=sa.text('(now())'),
               nullable=False)
    op.alter_column('mcps', 'created_at',
               existing_type=sa.DATETIME(),
               server_default=sa.text('(now())'),
               nullable=False)
    op.alter_column('mcps', 'type',
               existing_type=sa.Enum('LLM_PROMPT', 'JUPYTER_NOTEBOOK', 'PYTHON_SCRIPT', 'AI_ASSISTANT', name='mcptype'),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)
    op.alter_column('mcps', 'description',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('mcps', 'id',
               existing_type=sa.UUID(),
               type_=sa.NUMERIC(),
               existing_nullable=False)
    op.drop_column('mcps', 'current_version_id')
    op.add_column('mcp_versions', sa.Column('config', sqlite.JSON(), nullable=False))
    op.add_column('mcp_versions', sa.Column('description', sa.TEXT(), nullable=True))
    op.drop_constraint(None, 'mcp_versions', type_='foreignkey')
    op.create_foreign_key(None, 'mcp_versions', 'mcps', ['mcp_id'], ['id'], ondelete='CASCADE')
    op.create_index(op.f('idx_mcp_version'), 'mcp_versions', ['mcp_id', 'version'], unique=1)
    op.alter_column('mcp_versions', 'created_at',
               existing_type=sa.DATETIME(),
               server_default=sa.text('(now())'),
               nullable=False)
    op.alter_column('mcp_versions', 'mcp_id',
               existing_type=sa.UUID(),
               type_=sa.NUMERIC(),
               existing_nullable=False)
    op.alter_column('mcp_versions', 'id',
               existing_type=sa.UUID(),
               type_=sa.NUMERIC(),
               existing_nullable=False)
    op.drop_column('mcp_versions', 'updated_at')
    op.drop_column('mcp_versions', 'status')
    op.drop_column('mcp_versions', 'definition')
    op.alter_column('mcp_permissions', 'access_level',
               existing_type=sa.Integer(),
               type_=sa.VARCHAR(length=20),
               existing_nullable=False)
    op.alter_column('mcp_permissions', 'chain_id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.alter_column('mcp_permissions', 'user_id',
               existing_type=sa.UUID(),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
    op.drop_column('mcp_permissions', 'updated_at')
    op.drop_column('mcp_permissions', 'created_at')
    op.drop_column('mcp_permissions', 'id')
    op.add_column('mcp_configurations', sa.Column('last_modified', sa.DATETIME(), server_default=sa.text('(now())'), nullable=False))
    op.drop_constraint(None, 'mcp_configurations', type_='unique')
    op.alter_column('mcp_configurations', 'created_at',
               existing_type=sa.DATETIME(),
               server_default=sa.text('(now())'),
               existing_nullable=False)
    op.alter_column('mcp_configurations', 'id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_column('mcp_configurations', 'updated_at')
    op.drop_constraint(None, 'mcp_chains', type_='unique')
    op.alter_column('mcp_chains', 'created_at',
               existing_type=sa.DATETIME(),
               server_default=sa.text('(now())'),
               existing_nullable=False)
    op.alter_column('mcp_chains', 'id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.alter_column('mcp_chains', 'parent_chain',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=True)
    op.drop_column('mcp_chains', 'updated_at')
    op.add_column('chain_sessions', sa.Column('last_activity', sa.DATETIME(), server_default=sa.text('(now())'), nullable=False))
    op.alter_column('chain_sessions', 'created_at',
               existing_type=sa.DATETIME(),
               server_default=sa.text('(now())'),
               existing_nullable=False)
    op.alter_column('chain_sessions', 'id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_column('chain_sessions', 'updated_at')
    op.alter_column('audit_logs', 'created_at',
               existing_type=sa.DATETIME(),
               server_default=sa.text('(now())'),
               existing_nullable=False)
    op.alter_column('audit_logs', 'id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.alter_column('audit_logs', 'target_id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               nullable=True)
    op.alter_column('audit_logs', 'user_id',
               existing_type=sa.UUID(),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
    op.drop_column('audit_logs', 'updated_at')
    op.drop_table('workflow_step_runs')
    op.drop_table('reviews')
    op.drop_table('mcp_tags')
    # ### end Alembic commands ###