"""${message}

Revision ID: ${up_revision}
Revises: ${down_revision | comma,n}
Create Date: ${create_date}

This migration script:
1. Defines database schema changes
2. Handles both upgrade and downgrade operations
3. Includes proper documentation
4. Follows best practices for database migrations

The script is generated by Alembic and should be modified to include:
- Detailed descriptions of changes
- Proper SQL syntax
- Error handling
- Data migration steps if needed
"""
from alembic import op
import sqlalchemy as sa
${imports if imports else ""}

# revision identifiers, used by Alembic.
revision = ${repr(up_revision)}
down_revision = ${repr(down_revision)}
branch_labels = ${repr(branch_labels)}
depends_on = ${repr(depends_on)}


def upgrade() -> None:
    """
    Upgrade database schema.
    
    This function:
    1. Applies schema changes
    2. Handles data migrations
    3. Updates indexes and constraints
    4. Manages dependencies
    
    The changes should be:
    - Atomic (all or nothing)
    - Reversible (can be downgraded)
    - Well-documented
    - Tested
    """
    ${upgrades if upgrades else "pass"}


def downgrade() -> None:
    """
    Downgrade database schema.
    
    This function:
    1. Reverts schema changes
    2. Restores previous state
    3. Handles data rollback
    4. Manages dependencies
    
    The changes should:
    - Be the exact reverse of upgrade
    - Handle data loss gracefully
    - Be well-documented
    - Be tested
    """
    ${downgrades if downgrades else "pass"}