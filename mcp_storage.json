{
  "8d9449f6-ae5e-40d9-93ee-4627e46a1438": {
    "id": "8d9449f6-ae5e-40d9-93ee-4627e46a1438",
    "name": "Text Analyzer",
    "description": "Analyzes text and extracts key points",
    "type": "llm_prompt",
    "config": {
      "type": "llm_prompt",
      "name": "Text Analyzer",
      "template": "Analyze the following text and extract key points. Focus on main ideas, important details, and relationships between concepts:\n\n{text}\n\nProvide a structured analysis with:\n1. Main themes\n2. Key points\n3. Supporting details\n4. Relationships between ideas",
      "input_variables": [
        "text"
      ],
      "model_name": "claude-3-sonnet-20240229",
      "temperature": 0.3,
      "max_tokens": 2000,
      "system_prompt": "You are an expert text analyst. Your task is to analyze text and extract key points in a structured format. Focus on identifying main themes, important details, and relationships between concepts."
    }
  },
  "0473b193-81db-417a-a993-ed3890265d59": {
    "id": "0473b193-81db-417a-a993-ed3890265d59",
    "name": "Text Summarizer",
    "description": "Generates concise summaries from text analysis",
    "type": "llm_prompt",
    "config": {
      "type": "llm_prompt",
      "name": "Text Summarizer",
      "template": "Based on the following text analysis, create a concise summary that captures the main points and their relationships:\n\n{text}\n\nProvide a summary that:\n1. Highlights the most important themes\n2. Preserves key relationships between ideas\n3. Maintains the logical flow of the analysis\n4. Is suitable for visualization",
      "input_variables": [
        "text"
      ],
      "model_name": "claude-3-sonnet-20240229",
      "temperature": 0.3,
      "max_tokens": 1000,
      "system_prompt": "You are an expert summarizer. Your task is to create concise, well-structured summaries that preserve the key information and relationships from the input text. Focus on making the summary suitable for further processing and visualization."
    }
  },
  "example-notebook": {
    "id": "example-notebook",
    "name": "Example Analysis Notebook",
    "description": "A sample notebook demonstrating data analysis and visualization",
    "type": "jupyter_notebook",
    "config": {
      "type": "jupyter_notebook",
      "name": "Example Analysis Notebook",
      "notebook_path": "mcp/notebooks/example.ipynb",
      "execute_all": true,
      "timeout": 600
    }
  },
  "9569230c-2422-4527-98f3-653e2b333007": {
    "id": "9569230c-2422-4527-98f3-653e2b333007",
    "name": "Email Improver",
    "description": "improves emails",
    "type": "llm_prompt",
    "config": {
      "type": "llm_prompt",
      "name": "Email Improver",
      "template": "Improve the quality of my emails",
      "input_variables": [
        "Email Draft",
        "Tone"
      ],
      "system_prompt": "You are a professional writter",
      "model_name": "claude-3-opus-20240229",
      "temperature": 0.7,
      "max_tokens": 1000
    }
  },
  "fbb419c9-8b55-4cd8-ad12-31173555c7b1": {
    "id": "fbb419c9-8b55-4cd8-ad12-31173555c7b1",
    "name": "Hello World Example",
    "description": "A simple hello world example that demonstrates input variables and requirements",
    "type": "python_script",
    "config": {
      "type": "python_script",
      "name": "Hello World Example",
      "script_path": "mcp/scripts/hello_world.py",
      "requirements": [
        "requests==2.31.0"
      ],
      "input_variables": [
        "name",
        "language"
      ],
      "virtual_env": true,
      "timeout": 600
    }
  },
  "python-code-assistant": {
    "id": "python-code-assistant",
    "name": "Python Code Assistant",
    "description": "An expert Python developer assistant that helps create high-quality, production-grade code with best practices",
    "type": "llm_prompt",
    "config": {
      "type": "llm_prompt",
      "name": "Python Code Assistant",
      "template": "Please help me create Python code according to these specifications:\n\n{specification}\n\nFollow these rules:\n- MUST provide clean, production-grade, high quality code\n- ASSUME Python 3.9+\n- USE well-known python design patterns and OOP approaches\n- MUST provide code blocks with proper google style docstrings\n- MUST provide code blocks with input and return value type hinting\n- MUST use type hints\n- PREFER F-string for formatting strings\n- PREFER keeping functions Small: Each function should do one thing and do it well\n- USE @property for getter and setter methods\n- USE List and Dictionary Comprehensions\n- USE generators for large datasets\n- USE logging instead of print statements\n- MUST implement robust error handling\n- USE dataclasses for storing data\n- USE pydantic version 1 for data validation\n- Present code in code blocks without comments\n- Include example usage in if __name__ == '__main__'\n- Use #!filepath for multiple files",
      "input_variables": [
        "specification"
      ],
      "system_prompt": "You are an expert Python developer with deep knowledge of best practices, design patterns, and modern Python features. Your task is to help create high-quality, production-grade code that follows all specified guidelines. You should provide clear, well-documented, and maintainable code that adheres to Python best practices.",
      "model_name": "claude-3-opus-20240229",
      "temperature": 0.2,
      "max_tokens": 4000
    }
  },
  "code-writer-agent": {
    "id": "code-writer-agent",
    "name": "Code Writer Agent",
    "description": "An expert code writer that generates high-quality, production-ready code based on specifications",
    "type": "llm_prompt",
    "config": {
      "type": "llm_prompt",
      "name": "Code Writer Agent",
      "template": "Please help me write code according to these specifications:\n\n{specification}\n\nFollow these guidelines:\n1. Code Quality:\n   - Write clean, production-grade code\n   - Use modern language features and best practices\n   - Follow SOLID principles\n   - Implement proper error handling\n   - Add comprehensive documentation\n\n2. Code Structure:\n   - Use appropriate design patterns\n   - Keep functions small and focused\n   - Use meaningful variable and function names\n   - Organize code logically\n\n3. Documentation:\n   - Add clear docstrings\n   - Include type hints\n   - Document complex logic\n   - Add usage examples\n\n4. Testing:\n   - Include unit tests\n   - Add test cases for edge cases\n   - Document test scenarios\n\n5. Output Format:\n   - Present code in clear, formatted blocks\n   - Include all necessary imports\n   - Show example usage\n   - Explain key design decisions\n\nPlease provide the complete solution with all necessary files and explanations.",
      "input_variables": [
        "specification"
      ],
      "system_prompt": "You are an expert software engineer with deep knowledge of programming best practices, design patterns, and modern development techniques. Your task is to help create high-quality, production-ready code that follows all specified guidelines. You should provide clear, well-documented, and maintainable code that adheres to best practices and includes proper testing.",
      "model_name": "claude-3-opus-20240229",
      "temperature": 0.2,
      "max_tokens": 4000
    }
  },
  "7c50ce83-75f8-4390-90e0-ef9202226925": {
    "id": "7c50ce83-75f8-4390-90e0-ef9202226925",
    "name": "Test LLM Prompt",
    "description": "Test LLM prompt MCP",
    "type": "llm_prompt",
    "config": {
      "type": "llm_prompt",
      "name": "Test LLM Prompt",
      "template": "Tell me a joke about {topic}",
      "input_variables": [
        "topic"
      ],
      "model_name": "claude-3-sonnet-20240229",
      "temperature": 0.7,
      "max_tokens": 1000,
      "model_id": "claude-3-sonnet-20240229",
      "context_type": "memory"
    }
  },
  "e7292a1d-885d-45df-8eff-e2407dd45e4a": {
    "id": "e7292a1d-885d-45df-8eff-e2407dd45e4a",
    "name": "Test Python Script",
    "description": "Test Python script MCP",
    "type": "python_script",
    "config": {
      "type": "python_script",
      "name": "Test Python Script",
      "script_path": "mcp/scripts/hello_world.py",
      "requirements": [
        "requests==2.31.0"
      ],
      "input_variables": [
        "name",
        "language"
      ],
      "virtual_env": true,
      "timeout": 600,
      "model_id": "python",
      "context_type": "file"
    }
  },
  "957cb4a4-339c-4027-b7a0-20eec244d9c7": {
    "id": "957cb4a4-339c-4027-b7a0-20eec244d9c7",
    "name": "Test Notebook",
    "description": "Test Jupyter notebook MCP",
    "type": "jupyter_notebook",
    "config": {
      "type": "jupyter_notebook",
      "name": "Test Notebook",
      "notebook_path": "mcp/notebooks/example.ipynb",
      "execute_all": true,
      "timeout": 600,
      "model_id": "jupyter",
      "context_type": "file"
    }
  },
  "352c7d40-0394-40c0-b0ed-b3a93bf60861": {
    "id": "352c7d40-0394-40c0-b0ed-b3a93bf60861",
    "name": "Test LLM Prompt",
    "description": "Test LLM prompt MCP",
    "type": "llm_prompt",
    "config": {
      "type": "llm_prompt",
      "name": "Test LLM Prompt",
      "template": "Tell me a joke about {topic}",
      "input_variables": [
        "topic"
      ],
      "model_name": "claude-3-sonnet-20240229",
      "temperature": 0.7,
      "max_tokens": 1000,
      "model_id": "claude-3-sonnet-20240229",
      "context_type": "memory"
    }
  },
  "5c59430f-2c6c-49ac-aee9-d38e101f120e": {
    "id": "5c59430f-2c6c-49ac-aee9-d38e101f120e",
    "name": "Test Python Script",
    "description": "Test Python script MCP",
    "type": "python_script",
    "config": {
      "type": "python_script",
      "name": "Test Python Script",
      "script_path": "mcp/scripts/hello_world.py",
      "requirements": [
        "requests==2.31.0"
      ],
      "input_variables": [
        "name",
        "language"
      ],
      "virtual_env": true,
      "timeout": 600,
      "model_id": "python",
      "context_type": "file"
    }
  },
  "1dbb544f-6728-4f48-a2ea-85c362d9a273": {
    "id": "1dbb544f-6728-4f48-a2ea-85c362d9a273",
    "name": "Test Notebook",
    "description": "Test Jupyter notebook MCP",
    "type": "jupyter_notebook",
    "config": {
      "type": "jupyter_notebook",
      "name": "Test Notebook",
      "notebook_path": "mcp/notebooks/example.ipynb",
      "execute_all": true,
      "timeout": 600,
      "model_id": "jupyter",
      "context_type": "file"
    }
  }
}