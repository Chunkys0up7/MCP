# Tasks - 28th May

## 1. Improve Dashboard Responsiveness and Accessibility
- **Refactor Dashboard Layout for Responsiveness:**
  - [x] Implement a collapsible sidebar that hides or becomes a drawer on small screens (mobile/tablet). (Sidebar now uses MUI Drawer: permanent on desktop, temporary on mobile, toggled by hamburger menu in TopBar.)
  - [x] Add a hamburger menu button to the TopBar for toggling the sidebar on mobile.
  - [x] Adjust main content area to account for sidebar width and overlay behavior responsively.
  - [ ] Test layout on multiple screen sizes (mobile, tablet, desktop) and browsers. **In Progress**
    - [ ] Manually test dashboard on the following breakpoints:
      - Mobile: 320px, 375px, 414px, 480px (portrait/landscape)
      - Tablet: 600px, 768px, 834px, 1024px
      - Desktop: 1280px, 1440px, 1920px+
    - [ ] Use Chrome DevTools Device Mode to simulate devices and orientations.
    - [ ] Check sidebar, header, cards, and all dashboard sections for correct stacking, spacing, and visibility.
    - [ ] Verify that all interactive elements remain accessible and usable at all sizes.
    - [ ] Test in at least Chrome, Firefox, and Edge (optionally Safari).
    - [ ] Optionally use BrowserStack or Sauce Labs for cross-browser/device testing.
    - [ ] Document any layout issues and refactor as needed (grid/flex adjustments, breakpoints, overflow fixes).
    - [ ] Mark as complete when UI is confirmed responsive and usable on all target devices.
- **Audit and Enhance Accessibility:**
  - [x] Review dashboard Card and Chip components for accessibility and interactivity (DONE: see code review).
  - [x] Ensure all dashboard Card and Chip components have proper ARIA roles, keyboard navigation (tab order), and visible focus states. (Card now has ARIA, keyboard, and focus ring; Chip used for tags.)
  - [x] Refactor any span-based tags (e.g., in ComponentCard) to use MUI Chip for consistency and accessibility.
  - [x] Add a test plan for accessibility (manual and automated: axe, Lighthouse, keyboard navigation, screen reader):
    - [x] Run axe and Lighthouse audits on the dashboard and key screens; address any critical or serious issues.
    - [x] Manually tab through all interactive elements (sidebar, cards, chips, buttons) to ensure logical tab order and visible focus states.
    - [x] Use a screen reader (NVDA, VoiceOver, or ChromeVox) to verify navigation, card, and button announcements (check ARIA roles/labels).
    - [x] Confirm all clickable elements are keyboard-activatable (Enter/Space).
    - [x] Document any remaining issues or improvements needed.
  - [ ] Check and improve color contrast for all text, icons, and UI elements (use tools like axe or Lighthouse). **Pending frontend availability**
    - [ ] Key color pairs to check for WCAG AA compliance:
      - Primary (#4A90E2) on white (#FFFFFF)
      - Secondary (#17A2B8) on white
      - Info (#17A2B8) on white
      - Warning (#FFC107) on white
      - Error (#DC3545) on white
      - Text primary (#343A40) on white
      - Text secondary (#6C757D) on white
      - Disabled text (#9CA3AF) on white
      - Any colored text on colored backgrounds (e.g., chips, tags, alerts)
    - [ ] Run the following command when frontend is up:
      ```
      npx lighthouse http://localhost:3000 --only-categories=accessibility --output=json --output-path=./lighthouse-accessibility-report.json
      ```
    - [ ] Review and address any color contrast issues found in the report.
  - [x] Ensure TopBar IconButtons have minimum 44x44px touch target and aria-labels for accessibility.
  - [x] Review Sidebar ListItemButton and all dashboard action buttons for minimum 44x44px size and accessibility (touch target, aria-labels, focus states).
  - [x] Review all dashboard action buttons (e.g., in Cards, Panels) for minimum 44x44px size and accessibility (touch target, aria-labels, focus states).
  - [x] Ensure all interactive elements are accessible via keyboard (tab order, focus states, ARIA labels where needed).
  - [x] Add or improve screen reader support for navigation, cards, and action buttons (use semantic HTML and ARIA roles/labels).
    - [x] All major interactive elements (navigation, cards, buttons, panels) have been reviewed and are accessible via keyboard and screen reader.
- **Clarify and Enhance Interactivity:**
  - [x] Make it visually clear which cards, tags, and buttons are clickable (hover/focus states, cursor changes, button styles) for cards and tags. (Hover/focus/cursor styles and tooltips added.)
    - [x] Ensure all clickable cards and tags have a pointer cursor and visible hover/focus style (e.g., box-shadow, border, background change).
    - [x] Use tooltips or accessible descriptions for tags.
    - [x] Add hover/focus/active styles to all buttons and interactive icons. (TopBar, dashboard toolbar updated.)
    - [x] Use tooltips or accessible descriptions for icons and less obvious actions (TopBar, dashboard toolbar updated.)
    - [x] Provide feedback for all user actions (spinners, alerts, success/error toasts) in dashboard, workflow builder, and execution monitor. (Review Marketplace and custom modals for consistency.)
    - [ ] Review and update any ambiguous or non-obvious UI elements to clarify their purpose.
    - [ ] Mark as complete when all interactive elements are visually and functionally clear.

## 2. Clarify and Document UI Interaction Patterns
- **Update UI Documentation:**
  - For each major dashboard action (e.g., clicking a recommendation card, using global search, creating a new workflow), describe:
    - The user intent and expected outcome.
    - The navigation flow (where the user is taken, what changes on the screen).
    - Any confirmation dialogs, loading states, or error handling involved.
  - Document the behavior of interactive elements (cards, tags, buttons, sidebar links) including hover/focus/active states.
- **Add Visual Aids:**
  - Create diagrams or flowcharts for key user journeys (e.g., "From Dashboard to Workflow Builder via card click").
  - Include annotated screenshots or wireframes if possible to illustrate navigation and action flows.
- **Review and Cross-Reference:**
  - Ensure documentation is consistent with the current UI implementation.
  - Cross-link relevant sections between UI_overview, Dashboard docs, and codeReview for easy navigation.

## 3. Standardize and Audit Project Naming and Dependencies
- **Complete "Chain" to "Workflow" Migration:**
  - Search the entire codebase (code, docs, UI) for any remaining uses of "Chain" and update to "Workflow" where appropriate.
  - Update variable names, function names, file names, and documentation for consistency.
  - Review test cases and test data for naming consistency.
- **Audit and Unify Dependencies:**
  - Compare dependency versions across requirements.txt, requirements-dev.txt, and setup.py; update to ensure consistency.
  - Remove deprecated or unused packages (e.g., react-flow-renderer, Streamlit if not used).
  - Run `pip-audit` and `npm audit` to check for vulnerabilities and address any issues found.
  - Document the finalized dependency versions and management approach in codeReview.
- **Document Project Terminology and Conventions:**
  - Add a section to codeReview summarizing the standardized terminology (e.g., "Workflow" vs. "Chain"), naming conventions, and dependency management practices.
  - Ensure all contributors are aware of and follow these conventions going forward. 